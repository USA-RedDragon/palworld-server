name: Check for new releases

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

env:
  STEAMCMD_IMAGE: ghcr.io/usa-reddragon/steamcmd:main@sha256:334010d656a226879adc3f0099a5ebcbe87670db2a814863726001cb4ba30bb6

jobs:
  check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Palworld with SteamCMD
        run: |
          docker run --rm -i \
          -v ./palworld:/palworld \
          ${STEAMCMD_IMAGE} \
          +force_install_dir /palworld +login anonymous +app_update 2394010 validate +quit
        env:
          STEAMCMD_IMAGE: ${{ env.STEAMCMD_IMAGE }}

      - name: Check app build number
        id: check
        run: |
          set -euo pipefail
          CURRENT_VERSION="$(cat .version)"
          CURRENT_DIGEST="$(cat .digest)"

          # Now we read ./palworld/steamapps/appmanifest_2394010.acf to get the build id
          DOWNLOADED_VERSION="$(grep -oP '"buildid"\s*"\K[^"]+' ./palworld/steamapps/appmanifest_2394010.acf)"
          DOWNLOADED_DIGEST="$(sha256sum <(find ./palworld -type f -exec sha256sum {} \; | sort)) | awk '{print $1}'"

          echo "digest=$DOWNLOADED_DIGEST" >> $GITHUB_OUTPUT
          echo "build-id=$DOWNLOADED_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$DOWNLOADED_VERSION" ]; then
            echo -n "${DOWNLOADED_VERSION}" > .version
            echo "new-release=true" >> $GITHUB_OUTPUT
          fi

          if [ "$CURRENT_DIGEST" != "$DOWNLOADED_DIGEST" ]; then
            echo -n "${DOWNLOADED_DIGEST}" > .digest
            echo "new-digest=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup GPG
        if: steps.check.outputs.new-release == 'true' || steps.check.outputs.new-digest == 'true'
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Save changes to repo
        if: steps.check.outputs.new-release == 'true' || steps.check.outputs.new-digest == 'true'
        run: |
          git commit --signoff -m "Update to build ${{steps.check.outputs.build-id}}" -m "${{steps.check.outputs.build-id}}@${{steps.check.outputs.digest}}" .digest .version
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}

      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
          repositories: ${{ github.repository.name }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        id: cpr
        if: steps.check.outputs.new-release == 'true' || steps.check.outputs.new-digest == 'true'
        with:
          token: ${{ steps.app-token.outputs.token }}
          branch: automated/launcher-update
          delete-branch: true
          title: Palworld Server ${{steps.check.outputs.build-id}}
          body: ${{steps.check.outputs.build-id}} @ ${{steps.check.outputs.new-digest}}
          labels: |
            update
            chore
            automated pr
            autorebase:opt-in

      - name: Automerge Pull Request
        if: (steps.check.outputs.new-release == 'true' || steps.check.outputs.new-digest == 'true') && (steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated')
        run: gh pr merge --rebase --auto "$PR_NUMBER"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
